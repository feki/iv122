doctype html
html
  head
    title Ján Gábela, IV122 - 1. týždeň
    == Slim::Template.new('site/_head.slim').render

  body
    .container
      .row
        .col-lg-10.col-lg-offset-1
          h1.text-center
            | Vyriešené zadania z prvého týždňa
      hr
      .row
        .col-lg-offset-1.col-lg-10
          .row
            .col-lg-12
              h3.text-primary A) Collatzová rada
              p
                | Prvé dva obrázky boli vygenerované za pomoci vlastnej knižnice pre prácu s Svg grafikou.&#10;
                | Ostatné 4 obrazky boli vygenerované pomocou <i>gnuplot</i> knižnice.
              h3.small Algoritmus:
              pre
                code.ruby
                  | class Collatz&#10;
                  |   def initialize(number)&#10;
                  |     @number = number&#10;
                  |   end&#10;
                  | &#10;
                  |   def sequence&#10;
                  |     @_sequence ||= collatz_sequence(@number)&#10;
                  |   end&#10;
                  | &#10;
                  |   def number_of_steps&#10;
                  |     sequence.count&#10;
                  |   end&#10;
                  | &#10;
                  |   def maximum_number&#10;
                  |     sequence.max&#10;
                  |   end&#10;
                  | &#10;
                  |   def collatz_sequence(number)&#10;
                  |     return [number] if number == 1&#10;
                  | &#10;
                  |     next_number = number.even? ? number/2 : number*3 + 1&#10;
                  |     [number].concat collatz_sequence(next_number)&#10;
                  |   end&#10;
                  | end&#10;
              h3.small Outputs:
              .row
                .col-lg-6
                  img.img-responsive src="img/collatz_max.png" alt="collatz_max.png" title="collatz_max.png" style="width: 100%;"
                .col-lg-6
                  img.img-responsive src="img/collatz_steps.png" alt="collatz_steps.png" title="collatz_steps.png" style="width: 100%;"
              .row
                .col-lg-6
                  img.img-responsive src="img/collatz_max_plot.png" alt="collatz_max_plot.png" title="collatz_max_plot.png" style="width: 100%;"
                .col-lg-6
                  img.img-responsive src="img/collatz_steps_plot.png" alt="collatz_steps_plot.png" title="collatz_steps_plot.png" style="width: 100%;"
              .row
                .col-lg-6
                  img.img-responsive src="img/collatz_max_25_plot.png" alt="collatz_max_25_plot.png" title="collatz_max_25_plot.png" style="width: 100%;"
                .col-lg-6
                  img.img-responsive src="img/collatz_sequence_27_plot.png" alt="collatz_sequence_27_plot.png" title="collatz_sequence_27_plot.png" style="width: 100%;"

      hr
      .row
        .col-lg-offset-1.col-lg-10
          h3.text-primary B) Práca s grafikou
          h3.small Práca s bitmapov:
          pre
            code.ruby
              | require 'rubygems'&#10;
              | require 'RMagick'&#10;
              | include Magick&#10;
              | &#10;
              | def bitmap_method&#10;
              |   img = Image.new(256, 256) {&#10;
              |     self.background_color = 'white'&#10;
              |   }&#10;
              | &#10;
              |   256.times do |x|&#10;
              |     256.times do |y|&#10;
              |       img.pixel_color(x, 0, 255 - y, "rgb(&#35;{x},0,&#35;{255-y})")&#10;
              |     end&#10;
              |   end&#10;
              | &#10;
              |   img.display&#10;
              | end&#10;

          h3.small Práca s Svg grafikou:
          pre
            code.ruby
              | def svg_method(size)&#10;
              |   size_2  = size/2.0&#10;
              |   size_20 = size/20.0?&#10;
              | &#10;
              |   svg_line_args = {:swidth => 2}&#10;
              | &#10;
              |   svg = Svg::Svg.new :width => size, :height => size&#10;
              |   (0..10).each do |i|&#10;
              |     svg.add_shape(Svg::Line.new(     i*size_20, size_2, size_2, size_2-i*size_20, svg_line_args))&#10;
              |     svg.add_shape(Svg::Line.new(size-i*size_20, size_2, size_2, size_2-i*size_20, svg_line_args))&#10;
              |     svg.add_shape(Svg::Line.new(     i*size_20, size_2, size_2, size_2+i*size_20, svg_line_args))&#10;
              |     svg.add_shape(Svg::Line.new(size-i*size_20, size_2, size_2, size_2+i*size_20, svg_line_args))&#10;
              |   end&#10;
              | &#10;
              |   svg.doc.write File.new('svg_graphics.svg', 'w')&#10;
              | end&#10;
              | &#10;
              | if __FILE__ == $0&#10;
              |   svg_method(640)&#10;
              | end&#10;
          h3.small Outputs:
          .row
            .col-lg-6
              img.img-responsive src="img/bitmap.png" alt="bitmap.png" title="bitmap.png" style="width: 100%;"
            .col-lg-6
              img.img-responsive src="img/svg_graphics.png" alt="svg_graphics.png" title="svg_graphics.png" style="width: 100%;"

      hr
      .row
        .col-lg-offset-1.col-lg-10
          h3.text-primary C) Ulamova špirála
          h3.small Algoritmus:
          pre
            code.ruby
              | require 'rubygems'&#10;
              | require 'RMagick'&#10;
              | include Magick&#10;
              | &#10;
              | class UlamSpiral&#10;
              |   DIRECTIONS = [[1, 0], [0, -1], [-1, 0], [0, 1]]&#10;
              | &#10;
              |   # @param [Numeric] size number of columns and rows (size x size)&#10;
              |   def initialize(size)&#10;
              |     @size = size.odd? ? size : size-1&#10;
              |     @current_position = [@size/2, @size/2]&#10;
              |     @direction = 0&#10;
              |   end&#10;
              | &#10;
              |   def generate_img(img)&#10;
              |     number, step = 1, 1&#10;
              | &#10;
              |     while number <= @size**2&#10;
              |       2.times do&#10;
              |         step.times do&#10;
              |           x, y = @current_position&#10;
              |           img.pixel_color(x, y, 'black') if block_given? and yield(number)&#10;
              |           number += 1&#10;
              |           xt, yt = DIRECTIONS[@direction]&#10;
              |           @current_position = [x+xt, y+yt]&#10;
              |         end&#10;
              |        @direction = (@direction+1)%4&#10;
              |       end&#10;
              |       step += 1&#10;
              |     end&#10;
              | &#10;
              |     return img&#10;
              |   end&#10;
              | end&#10;
              | &#10;
              | if __FILE__ == $0&#10;
              |   size = 640&#10;
              |   img = Image.new(size, size) {&#10;
              |     self.background_color = 'white'&#10;
              |   }&#10;
              | &#10;
              |   ulms = UlamSpiral.new(size)&#10;
              |   img = ulms.generate_img(img) { |number| number.prime? }&#10;
              | &#10;
              |   img.write 'png:outputs/ulam_prime.png'&#10;
              | &#10;
              | &#10;
              |   img = Image.new(size, size) {&#10;
              |     self.background_color = 'white'&#10;
              |   }&#10;
              | &#10;
              |   ulms = UlamSpiral.new(size)&#10;
              |   img = ulms.generate_img(img) { |number| number % 7 == 0 }&#10;
              | &#10;
              |   img.write 'png:outputs/ulam_modulo_7.png&#10;
              | end&#10;
          h3.small Outputs:
          .row
            .col-lg-6
              img.img-responsive src="img/ulam_prime.png" alt="ulam_prime.png" title="ulam_prime.png"
            .col-lg-6
              img.img-responsive src="img/ulam_modulo_7.png" alt="ulam_modulo_7.png" title="ulam_modulo_7.png"
      hr
      .row
        .col-lg-offset-1.col-lg-10
          h3.text-primary D) Vizualizácia najväčšieho spoločného delitela
          h3.small Algoritmus:
          pre
            code.ruby
              | class Gcd&#10;
              |   class &lt;&lt; self&#10;
              |     def gcd_subtract(a, b)&#10;
              |       while a != b&#10;
              |         a, b = b, a if a &lt; b&#10;
              |         a = a - b&#10;
              |         yield if block_given?&#10;
              |       end&#10;
              | &#10;
              |       return a&#10;
              |     end&#10;
              | &#10;
              |     def gcd_modulo(a, b)&#10;
              |       a, b = b, a if a &lt; b&#10;
              | &#10;
              |       while a % b != 0&#10;
              |         a, b = b, a % b&#10;
              |         yield if block_given?&#10;
              |       end&#10;
              | &#10;
              |       return b&#10;
              |     end&#10;
              | &#10;
              |     def gcd_subtract_steps(a, b)&#10;
              |       res = 0&#10;
              |       Gcd.gcd_subtract(a, b) { res += 1 }&#10;
              |       return res&#10;
              |     end&#10;
              | &#10;
              |     def gcd_modulo_steps(a, b)&#10;
              |       res = 0&#10;
              |       Gcd.gcd_modulo(a, b) { res += 1 }&#10;
              |       return res&#10;
              |     end&#10;
              |   end&#10;
              | end&#10;
              | &#10;
              | require 'rubygems'&#10;
              | require 'RMagick'&#10;
              | &#10;
              | include Magick&#10;
              | &#10;
              | def visualize_gcd&#10;
              |   size = 256&#10;
              |   img = Image.new(size, size) {&#10;
              |     self.background_color = 'black'&#10;
              |   }&#10;
              | &#10;
              |   size.times do |x|&#10;
              |     size.times do |y|&#10;
              |       img.pixel_color(x, size-y, "cmyk(0,0,0,&#35;{yield(x,y)}") if block_given?&#10;
              |     end&#10;
              |   end&#10;
              | &#10;
              |   return img&#10;
              | end&#10;
              | &#10;
              | if __FILE__ == $0&#10;
              |   # gcd size&#10;
              |   img = visualize_gcd { |x,y| Gcd.gcd_modulo(x+1, y+1) % 256 }&#10;
              |   img.write 'png:outputs/gcd_size.png'&#10;
              | &#10;
              |   # gcd subtract steps&#10;
              |   img = visualize_gcd { |x,y| Gcd.gcd_subtract_steps(x+1, y+1) % 256 }&#10;
              |   img.write 'png:outputs/gcd_subtract_steps.png'&#10;
              | &#10;
              |   # gcd modulo steps 24&#10;
              |   img = visualize_gcd { |x,y| 24 * Gcd.gcd_modulo_steps(x+1, y+1) % 256 }&#10;
              |   img.write 'png:outputs/gcd_modulo_steps_24.png&#10;
              | end&#10;
          h3.small Outputs:
          .row
            .col-lg-4
              img.img-responsive src="img/gcd_size.png" alt="gcd_size.png" title="gcd_size.png" style="width: 100%;"
            .col-lg-4
              img.img-responsive src="img/gcd_subtract_steps.png" alt="gcd_subtract_steps.png" title="gcd_subtract_steps.png" style="width: 100%;"
            .col-lg-4
              img.img-responsive src="img/gcd_modulo_steps_24.png" alt="gcd_modulo_steps_24.png" title="gcd_modulo_steps_24.png" style="width: 100%;"
      hr
    javascript:
      hljs.initHighlightingOnLoad();